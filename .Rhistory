library(data.table)
library(data.table)
library(quantmod)
library(quantmod)
date.from <- "2007-12-31"
date.to   <- "2022-12-31"
vfiax <- getSymbols("vfiax",src="yahoo",
from=date.from,
to=date.to,
auto.assign=FALSE)[,6]
str(vfiax)
vfiax <- na.omit(vfiax)
# convert to data.table
data.yahoo <- as.data.table(vfiax)
names(data.yahoo)[1] <- 'date'
head(data.yahoo,3)
data.yahoo[, logret := c(NA,diff(log(data.yahoo$VFIAX.Adjusted)))]
data.yahoo <- data.yahoo[-1]
data.yahoo[, ret := exp(logret)-1 ]
data.yahoo
str(vfiax)
vfiax
vfiax <- getSymbols("vfiax",src="yahoo",
from=date.from,
to=date.to,
auto.assign=FALSE)[,6]
vfiax <- na.omit(vfiax)
vfiax
vfiax <- getSymbols("vfiax",src="yahoo",
from=date.from,
to=date.to,
auto.assign=FALSE)
vfiax <- na.omit(vfiax)
vfiax
vfiax <- getSymbols("vfiax",src="yahoo",
from=date.from,
to=date.to,
auto.assign=FALSE)[,6]
vfiax <- na.omit(vfiax)
vfiax
str(vfiax)
# convert to data.table
data.yahoo <- as.data.table(vfiax)
names(data.yahoo)[1] <- 'date'
head(data.yahoo,3)
data.yahoo[, logret := c(NA,diff(log(data.yahoo$VFIAX.Adjusted)))]
data.yahoo <- data.yahoo[-1]
data.yahoo[, ret := exp(logret)-1 ]
str(data.yahoo)
nrow(vfiax)
data.yahoo
head(data.yahoo,3)
head(data.yahoo)
plot(data.yahoo$date, data.yahoo$VFIAX.Adjusted)
plot(data.yahoo$date, data.yahoo$ret)
plot(data.yahoo$date, data.yahoo$logret)
plot(data.yahoo$date, data.yahoo$logret)
logret.xts <- xts(data.yahoo$logret,order.by=data.yahoo$date)
names(logret.xts) = c('logret')
str(logret.xts)
library(ggplot2)
library(ggplot2)
ggplot(logret.xts)
ggplot(logret.xts)+
geom_point()
logret.xts
ggplot(logret.xts)+
geom_point(aes(x = index(logret.xts), y = logret))
ggplot(logret.xts)+
geom_point(aes(x = index(logret.xts), y = logret))+
theme_minimal()
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
setwd("E:/MQM_Courses/Term5/Financial_Risk_Management/FRM/data")
load("MQM530_IndividualAssignment1.RData")
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
setwd("E:/MQM_Courses/Term5/Financial_Risk_Management/FRM/data")
load("MQM530_IndividualAssignment1.RData")
### question 2 start ###
merge(vfiax_price, vfiax_dividend, on = "Date")
vfiax_price
?merge
class(vfiax_price)
### question 2 start ###
merge(vfiax_price, vfiax_dividend, by = "Date", all.x = TRUE)
### question 2 start ###
data_van <- merge(vfiax_price, vfiax_dividend, by = "Date", all.x = TRUE)
data_van
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
library(data.table)
library(quantmod)
library(xts)
setwd("E:/MQM_Courses/Term5/Financial_Risk_Management/FRM/data")
load("MQM530_IndividualAssignment1.RData")
### question 2 start ###
data_van <- merge(vfiax_price, vfiax_dividend, by = "Date", all.x = TRUE)
class(vfiax_price)
data_van
na.fill(data_van$Dividend, 0)
data_van
data_van$Dividend <-  na.fill(data_van$Dividend, 0)
data_van
View(data_van)
data_van[Dividend != 0]
## daily discrete return:
data_van[, lag := lag(Price)]
data_van
## daily discrete return:
data_van[, lag := lag(Price,1)]
data_van
## daily discrete return:
data_van[, lag := lag(Price, k = 1)]
data_van
?xts
## daily discrete return:
xts(data_van[-1], order.by = data_van[1])
## daily discrete return:
xts(data_van, order.by = data_van[1])
str(data_van)
as.xts(data_van)
data_van <- as.xts(data_van)
## daily discrete return:
str(data_van)
data_van[, lag := lag(Price, k = 1)]
setwd("E:/MQM_Courses/Term5/Financial_Risk_Management/FRM/data")
load("MQM530_IndividualAssignment1.RData")
### question 2 start ###
data_van <- merge(vfiax_price, vfiax_dividend, by = "Date", all.x = TRUE)
data_van$Dividend <-  na.fill(data_van$Dividend, 0)
## daily discrete return:
str(data_van)
data_van[, lag := lag(Price, k = 1)]
data_van
### question 2 start ###
data_van <- merge(vfiax_price, vfiax_dividend, by = "Date", all.x = TRUE)
data_van$Dividend <-  na.fill(data_van$Dividend, 0)
data_van[, ret := diff(Price)]
data_van
data_van[, ret := diff(data_van$Price)]
diff(data_van$Price)
data_van
data_van[, ret := c(NA,diff(data_van$Price))]
data_van
data_van[, ret := c(NA,log(data_van$Price))]
data_van[, ret := c(NA,lag(data_van$Price))]
data_van[, ret := lag(data_van$Price)]
data_van
lag(data_van$Price)
lag(data_van$Price, k = 1)
data_van$Price
?lag()
data_van[, ret := shift(Price, n =1)]
data_van
data_van[, ret := shift(Price, n = -1)]
data_van
data_van[, ret := (Price + Dividend ) / shift(Price, n = -1)]
data_van
data_van[, ret := (Price + Dividend ) / shift(Price, n = -1) - 1]
data_van
data_van[, ret := (Price + Dividend ) / shift(Price, n = 1) - 1]
data_van
adta_van[Date == "2023-02-16"]
data_van[Date == "2023-02-16"]
data_van[Date == "2023-02-16", "ret"]
data_van[Date == "2023-02-16"]$ret
answer2 = round(data_van[Date == "2023-02-16"]$ret, 4)  ### replace NA with R code generating the answer
cat("Answer Q2:", answer2,'\n')
str(data_van)
### question 2 start ###
data_van <- merge(vfiax_price, vfiax_dividend, by = "Date", all.x = TRUE)
data_van$Dividend <-  na.fill(data_van$Dividend, 0)
str(data_van)
## daily discrete return: ((Pt + Dt)/Pt-1) -1
data_van[, ret_van := (Price + Dividend ) / shift(Price, n = 1) - 1]
answer2 = round(data_van[Date == "2023-02-16"]$ret_van, 4)  ### replace NA with R code generating the answer
cat("Answer Q2:", answer2,'\n')
### question 3 start ###
data_van[, logret_van := log( 1 + ret_van )]
data_van
answer3 = round(data_van[Date == "2023-02-16"]$logret_van, 4)  ### replace NA with R code generating the answer
cat("Answer Q3:", answer3,'\n')
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
library(data.table)
library(quantmod)
### question 4 start ###
vfiax <- getSymbols("vfiax", src="yahoo", from="2022-12-31",
to="2024-01-01", auto.assign=FALSE)[,6]
data_yahoo <- as.data.table(vfiax)
names(data.yahoo) <- c("Date","AdjPrice")
names(data_yahoo) <- c("Date","AdjPrice")
data_yahoo[, logret_yahoo := c(NA,diff(log(AdjPrice))) ]
data_yahoo[, ret_yahoo := exp(logret_yahoo)-1 ]
data_yahoo
data_yahoo[Date == "2023-02-16"]
data_yahoo[Date == "2023-02-16"]$ret_yahoo
answer4 = round(data_yahoo[Date == "2023-02-16"]$ret_yahoo, 4) ### replace NA with R code generating the answer
cat("Answer Q4:", answer4,'\n')
data_van[Date == "2023-02-16"]$logret_van
data_van[Date == "2023-02-16"]$ret_van
cat("Answer Q4:", answer4,'\n')
### question 5 start ###
tmp1 <- data_van[, .(Date,ret_van) ]
tmp2 <- data_yahoo[, .(Date,ret_yahoo) ]
tmp1
tmp2
merge(tmp1, tmp2, by = Date)
merge(tmp1, tmp2, by = "Date")
tmp <- merge(tmp1, tmp2, by = "Date")
tmp[, dif := abs(ret_van - ret_yahoo)]
tmp
max(tmp$dif)
na.omit(tmp)
tmp
tmp <- tmp[, dif := abs(ret_van - ret_yahoo)]
tmp <- na.omit(tmp)
max(tmp$dif)
answer5 = max(tmp$dif)            ### replace NA with R code generating the answer
cat("Answer Q5:", answer5,'\n')
answer5 = round(max(tmp$dif),6)    ### replace NA with R code generating the answer
round(max(tmp$dif),6)
cat("Answer Q5:", answer5,'\n')
answer5 = as.character(round(max(tmp$dif),6) )   ### replace NA with R code generating the answer
as.character(round(max(tmp$dif),6) )
answer5 = max(tmp$dif) ### replace NA with R code generating the answer
cat("Answer Q5:", answer5,'\n')
### question 6 start ###
logret.xts <- as.xts( x=data_yahoo$logret_yahoo, order.by=data_yahoo$Date)
logret_monthly <- apply.monthly(logret.xts,sum)
logret_monthly
ret_monthly <- exp(logret_monthly) - 1
ret_monthly
ret_monthly[.N]
ret_monthly[.N,]
ret_monthly["2023-12-29"]
ret_monthly[["2023-12-29"]]
ret_monthly["2023-12-29"]
answer6 = ret_monthly["2023-12-29"]              ### replace NA with R code generating the answer
cat("Answer Q6:", answer6,'\n')
answer6 = round(ret_monthly["2023-12-29"],4) ### replace NA with R code generating the answer
cat("Answer Q6:", answer6,'\n')
### Verify your answers ###
check_for_answer <- function(question_num) {
# check environment if variable containing the answer is present in R environment
# in try catch block below
tryCatch({
if (exists(paste0("answer",question_num))){
answer <- get(paste0("answer",question_num))
}
else{
answer <- NA
}
})
return(answer)
}
answers = rep(NA, 6)
for (i in c(2,3,4,5,6)){
answers[i] = check_for_answer(i)
}
answers
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
library(data.table)
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
library(data.table)
library(quantmod)
library(xts)
library(data.table)
library(quantmod)
library(xts)
start_date <- "2002-03-01"
end_date <- "2023-01-01"
tkr <- "GME"
data <- getSymbols(tkr,src="yahoo",from=start_date,to=end_date,auto.assign=FALSE)
data <- data[,6]                     # this keeps only the adjust closing price of GME
df <- as.data.table(data)            # create a data.table with two columns
names(df) <- c("date","adjprice")    # first column is 'date', second column is 'price'
df[, logret := c(NA,diff(log(adjprice)))]  # calculate daily log return
df[, ret    := exp(logret)-1 ]       # calculate daily discrete return
df <- df[-1]
DATE <- function(yyyy,mm,dd) {
dte  <- as.Date(sprintf("%i-%i-%i",yyyy,mm,dd),format="%Y-%m-%d")
return(dte)
}
logret <- df[date<DATE(2020,12,31)]$logret
fitdistr(logret)
library(quantmod)
fitdistr(logret)
?fitdistr
??fitdistr
library(MASS)
fitdistr(logret)
fitdistr(logret, densfun = "normal")
fit_n <- fitdistr(logret, densfun = "normal")
AIC_n <- 2*length(fit_n$estimate) - 2*fit_n$loglik
fit_n <- fitdistr(logret, densfun = "normal")
AIC_n <- 2*length(fit_n$estimate) - 2*fit_n$loglik
answer2 = round(AIC_n)              ### replace NA with R code generating the answer
cat("Answer Q2:", answer2,'\n')
#----------------------------------------------------
### question 3 start ###
fit_t <- fitdistr(logret, densfun = "t")
AIC_t <- 2*length(fit_t$estimate) - 2*fit_t$loglik
answer3 = round(AIC_t)                ### replace NA with R code generating the answer
cat("Answer Q3:", answer3,'\n')
#----------------------------------------------------
### question 4 start ###
rtms <- function(n,df,m,s) {
return( ( rt(n,df) * s + m ) )
}
tdf <- fit_t$estimate[[3]]
m <- fit_t$estimate[[1]]
s <- fit_t$estimate[[2]]
nsim <- 100000
set.seed(437)
sim <- rtms(nsim,tdf,m,s)
sim
CalcVaRES <- function(r,alpha) {
VaR <- quantile(r,1-alpha)
ES <- mean(r[r<VaR])
VaR_ES <- c(VaR,ES)
names(VaR_ES) <- c("VaR","ES")
return(VaR_ES)
}
VaR_ES <- CalcVaRES(value,alpha)
VaR_ES <- CalcVaRES(sim,alpha)
alpha <- 0.95
VaR_ES <- CalcVaRES(sim,alpha)
VaR_ES
VaR_ES[[1]]
answer4 = round(VaR_ES[[1]])   ### replace NA with R code generating the answer
cat("Answer Q4:", answer4,'\n')
answer4 = round(VaR_ES[[1]],4)   ### replace NA with R code generating the answer
cat("Answer Q4:", answer4,'\n')
loss_Var_ES <- CalcVaRES(loss, alpha)
#----------------------------------------------------
### question 5 start ###
initial <- 100000
loss <- sim*initial
loss_Var_ES <- CalcVaRES(loss, alpha)
loss_Var_ES
answer5 = round(loss_Var_ES[[1]])      ### replace NA with R code generating the answer
cat("Answer Q5:", answer5,'\n')
#----------------------------------------------------
### question 6 start ###
istart <- sum(df$date<=DATE(2020,12,31))
iend   <- sum(df$date<=DATE(2021,6,30))
df$VaR.t <- NA
set.seed(437)
for (idt in c((istart-1):(iend-1))) {
tmp <- df$logret[c(1:idt)]
#
# add your code here
#
# estimate the IID~t distribution for tmp
#
# simulate 100,000 times from this estimated model
#
# find the VaR at the 95 percent confidence level using the CalcVaRES() function
#
# store the VaR in the following day
df$VaR.t[(idt+1)] <- VaR_ES[[1]]
}
df[c((istart+1):iend)]   # displays the results for 2021-01-04 to 2021-06-30
istart
iend
df
istart
iend
#----------------------------------------------------
### question 6 start ###
istart <- sum(df$date<=DATE(2020,12,31))
iend   <- sum(df$date<=DATE(2021,6,30))
df$VaR.t <- NA
set.seed(437)
for (idt in c((istart-1):(iend-1))) {
tmp <- df$logret[c(1:idt)]
#
# add your code here
# estimate the IID~t distribution for tmp
fit_t <- fitdistr(tmp, densfun = "t")
# simulate 100,000 times from this estimated model
nsim <- 100000
tdf <- fit_t$estimate[[3]]
m <- fit_t$estimate[[1]]
s <- fit_t$estimate[[2]]
sim <- rtms(nsim,tdf,m,s)
# find the VaR at the 95 percent confidence level using the CalcVaRES() function
alpha <- 0.95
VaR_ES <- CalcVaRES(sim,alpha)
# store the VaR in the following day
df$VaR.t[(idt+1)] <- VaR_ES[[1]]
}
df[c((istart+1):iend)]   # displays the results for 2021-01-04 to 2021-06-30
df$logret < df$VaR.t
df.q6 <- df[c((istart+1):iend)]   # displays the results for 2021-01-04 to 2021-06-30
df.q6$logret < df.q6$VaR.t
sum(df.q6$logret < df.q6$VaR.t)
answer6 = sum(df.q6$logret < df.q6$VaR.t)   ### replace NA with R code generating the answer
cat("Answer Q6:", answer6,'\n')
check_for_answer <- function(question_num) {
# check environment if variable containing the answer is present in R environment
# in try catch block below
tryCatch({
if (exists(paste0("answer",question_num))){
answer <- get(paste0("answer",question_num))
}
else{
answer <- NA
}
})
return(answer)
}
answers = rep(NA, 6)
for (i in 2:6){
answers[i] = check_for_answer(i)
}
answers
