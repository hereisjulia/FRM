data_van
data_van[, ret := (Price + Dividend ) / shift(Price, n = -1) - 1]
data_van
data_van[, ret := (Price + Dividend ) / shift(Price, n = 1) - 1]
data_van
adta_van[Date == "2023-02-16"]
data_van[Date == "2023-02-16"]
data_van[Date == "2023-02-16", "ret"]
data_van[Date == "2023-02-16"]$ret
answer2 = round(data_van[Date == "2023-02-16"]$ret, 4)  ### replace NA with R code generating the answer
cat("Answer Q2:", answer2,'\n')
str(data_van)
### question 2 start ###
data_van <- merge(vfiax_price, vfiax_dividend, by = "Date", all.x = TRUE)
data_van$Dividend <-  na.fill(data_van$Dividend, 0)
str(data_van)
## daily discrete return: ((Pt + Dt)/Pt-1) -1
data_van[, ret_van := (Price + Dividend ) / shift(Price, n = 1) - 1]
answer2 = round(data_van[Date == "2023-02-16"]$ret_van, 4)  ### replace NA with R code generating the answer
cat("Answer Q2:", answer2,'\n')
### question 3 start ###
data_van[, logret_van := log( 1 + ret_van )]
data_van
answer3 = round(data_van[Date == "2023-02-16"]$logret_van, 4)  ### replace NA with R code generating the answer
cat("Answer Q3:", answer3,'\n')
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
library(data.table)
library(quantmod)
### question 4 start ###
vfiax <- getSymbols("vfiax", src="yahoo", from="2022-12-31",
to="2024-01-01", auto.assign=FALSE)[,6]
data_yahoo <- as.data.table(vfiax)
names(data.yahoo) <- c("Date","AdjPrice")
names(data_yahoo) <- c("Date","AdjPrice")
data_yahoo[, logret_yahoo := c(NA,diff(log(AdjPrice))) ]
data_yahoo[, ret_yahoo := exp(logret_yahoo)-1 ]
data_yahoo
data_yahoo[Date == "2023-02-16"]
data_yahoo[Date == "2023-02-16"]$ret_yahoo
answer4 = round(data_yahoo[Date == "2023-02-16"]$ret_yahoo, 4) ### replace NA with R code generating the answer
cat("Answer Q4:", answer4,'\n')
data_van[Date == "2023-02-16"]$logret_van
data_van[Date == "2023-02-16"]$ret_van
cat("Answer Q4:", answer4,'\n')
### question 5 start ###
tmp1 <- data_van[, .(Date,ret_van) ]
tmp2 <- data_yahoo[, .(Date,ret_yahoo) ]
tmp1
tmp2
merge(tmp1, tmp2, by = Date)
merge(tmp1, tmp2, by = "Date")
tmp <- merge(tmp1, tmp2, by = "Date")
tmp[, dif := abs(ret_van - ret_yahoo)]
tmp
max(tmp$dif)
na.omit(tmp)
tmp
tmp <- tmp[, dif := abs(ret_van - ret_yahoo)]
tmp <- na.omit(tmp)
max(tmp$dif)
answer5 = max(tmp$dif)            ### replace NA with R code generating the answer
cat("Answer Q5:", answer5,'\n')
answer5 = round(max(tmp$dif),6)    ### replace NA with R code generating the answer
round(max(tmp$dif),6)
cat("Answer Q5:", answer5,'\n')
answer5 = as.character(round(max(tmp$dif),6) )   ### replace NA with R code generating the answer
as.character(round(max(tmp$dif),6) )
answer5 = max(tmp$dif) ### replace NA with R code generating the answer
cat("Answer Q5:", answer5,'\n')
### question 6 start ###
logret.xts <- as.xts( x=data_yahoo$logret_yahoo, order.by=data_yahoo$Date)
logret_monthly <- apply.monthly(logret.xts,sum)
logret_monthly
ret_monthly <- exp(logret_monthly) - 1
ret_monthly
ret_monthly[.N]
ret_monthly[.N,]
ret_monthly["2023-12-29"]
ret_monthly[["2023-12-29"]]
ret_monthly["2023-12-29"]
answer6 = ret_monthly["2023-12-29"]              ### replace NA with R code generating the answer
cat("Answer Q6:", answer6,'\n')
answer6 = round(ret_monthly["2023-12-29"],4) ### replace NA with R code generating the answer
cat("Answer Q6:", answer6,'\n')
### Verify your answers ###
check_for_answer <- function(question_num) {
# check environment if variable containing the answer is present in R environment
# in try catch block below
tryCatch({
if (exists(paste0("answer",question_num))){
answer <- get(paste0("answer",question_num))
}
else{
answer <- NA
}
})
return(answer)
}
answers = rep(NA, 6)
for (i in c(2,3,4,5,6)){
answers[i] = check_for_answer(i)
}
answers
data.yahoo
library(data.table)
library(quantmod)
library(ggplot2)
########################################
date.from <- "2007-12-31"
date.to   <- "2022-12-31"
vfiax <- getSymbols("vfiax",src="yahoo",
from=date.from,
to=date.to,
auto.assign=FALSE)[,6]
vfiax <- na.omit(vfiax)
# convert to data.table
data.yahoo <- as.data.table(vfiax)
names(data.yahoo)[1] <- 'date'
head(data.yahoo)
data.yahoo[, logret := c(NA,diff(log(data.yahoo$VFIAX.Adjusted)))]
data.yahoo <- data.yahoo[-1]
data.yahoo[, ret := exp(logret)-1 ]
logret.xts <- xts(data.yahoo$logret,order.by=data.yahoo$date)
names(logret.xts) = c('logret')
str(logret.xts)
ggplot(logret.xts)+
geom_point(aes(x = index(logret.xts), y = logret))+
theme_minimal()
data.yahoo
library(moments)
install.packages("moments")
library(moments)
library(moments)
# Skewness
skewness(data.yahoo$logret)
# Skewness
cat("Skewness: ",skewness(data.yahoo$logret))
# Skewness
cat("Skewness: ", round(skewness(data.yahoo$logret)))
# Skewness
cat("Skewness: ", round(skewness(data.yahoo$logret)),4)
# Skewness
cat("Skewness: ", round(skewness(data.yahoo$logret),4))
cat("Skewness: ", round(kurtosis(data.yahoo$logret),4))
## Jarque-Bera Test for Normality
jarque.test(as.vector(data.yahoo$logret))
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
setwd("E:/MQM_Courses/Term5/Financial_Risk_Management/FRM/data")
load("MQM530_IndividualAssignment2.RData")
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
setwd("E:/MQM_Courses/Term5/Financial_Risk_Management/FRM/data")
load("MQM530_IndividualAssignment2.RData")
# sample R file to upload for individual assignment
# use setwd() to set the working directory
# do not use choose.file()
# please place the R code for each question in the space provided below.
# R submission files that do not follow the required format will have points deducted.
library(data.table)
setwd("E:/MQM_Courses/Term5/Financial_Risk_Management/FRM/data")
load("MQM530_IndividualAssignment2.RData",verbose=TRUE)
logret <- as.vector(log(1+lcap_data$lcap))
library(MASS)
library(MASS)
?fitdistr
### question 2 start ###
fitdistr(logret)
### question 2 start ###
fitdistr(logret, densfun = "normal")
### question 2 start ###
fitdistr(logret, densfun = "normal")$sd
### question 2 start ###
fitdistr(logret, densfun = "normal")$sd$mean
### question 2 start ###
fitdistr(logret, densfun = "normal")$sd[1]
### question 2 start ###
fitdistr(logret, densfun = "normal")$sd[[1]]
answer2 = round(fitdistr(logret, densfun = "normal")$sd[[1]], 4)               ### replace NA with R code generating the answer
cat("Answer Q2:", answer2,'\n')
return(g)
### question 3 start ###
plot_normal <- function(data,showplot=TRUE) {
if (!require(ggplot2)) install.packages('ggplot2')
if (!require(MASS)) install.packages('MASS')
library(ggplot2)
library(MASS)
# r is a vector of data
r <- as.vector(data)
r <- na.omit(r)
r_min  <- min(r)
r_max  <- max(r)
n_fit <- fitdistr(r,"normal")
m <- n_fit$estimate[1]
s <- n_fit$estimate[2]
# find limits of x-axis in plot, to nearest 0.05
plot_lim <-  max(abs(r_min),abs(r_max))
plot_lim <- (round(plot_lim*100/5)+1)*5/100
df <- data.frame(r=r)
g <-ggplot(df,aes(r)) +
geom_histogram(aes(y=..density..),
alpha=0.8) +
scale_x_continuous(name="Returns",limits=c(-plot_lim,plot_lim)) +
scale_y_continuous(name="Density") +
stat_function(fun = dnorm,
args = list(mean = m, sd = s),
lwd=1,col = 'red')
if (showplot) g
return(g)
}
plot_normal(logret)
library(moments)
answer3 = "Graph B"          ### replace NA with R code generating the answer
cat("Answer Q3:", answer3,'\n')
### question 4 start ###
skewness(logret)
kurtosis(logret)
jarque.test(logret)
a <- jarque.test(logret)
a$statistic
jarque.test(logret)$statistic
answer4 = jarque.test(logret)$statistic  ### replace NA with R code generating the answer
cat("Answer Q4:", answer4,'\n')
?logret
?fitdistr
### question 5 start ###
fitdistr(logret, densfun = "t")
### question 5 start ###
fitdistr(logret, densfun = "t")$df
### question 5 start ###
fitdistr(logret, densfun = "t")
### question 5 start ###
a <- fitdistr(logret, densfun = "t")
a$vcov
a$vcov[1,3]
a$loglik
a
a$estimate
a$estimate[[3]]
answer5 = fitdistr(logret, densfun = "t")$estimate[[3]] ### replace NA with R code generating the answer
cat("Answer Q5:", answer5,'\n')
answer5 = round(fitdistr(logret, densfun = "t")$estimate[[3]], 3) ### replace NA with R code generating the answer
cat("Answer Q5:", answer5,'\n')
### question 6 start ###
plot_t <- function(data,showplot=TRUE) {
if (!require(ggplot2)) install.packages('ggplot2')
if (!require(MASS)) install.packages('MASS')
if (!require(metRology)) install.packages('metRology')
library(ggplot2)
library(MASS)
library(metRology)
# r is a vector of data
r <- as.vector(data)
r <- na.omit(r)
dt2 <- function(x,t_mu,t_sigma,t_df) {
dt( (x-t_mu)/t_sigma, df=t_df ) / t_sigma
}
t_fit <- fitdistr(r,"t")
m <- t_fit$estimate[1]
s <- t_fit$estimate[2]
tdf <- t_fit$estimate[3]
r_min  <- min(r)
r_max  <- max(r)
# find limits of x-axis in plot, to nearest 0.05
plot_lim <- max(abs(r_min),abs(r_max))
plot_lim <- (round(plot_lim*100/5)+1)*5/100
df <- data.frame(r=r)
g <- ggplot(df,aes(r)) +
geom_histogram(aes(y=..density..),
alpha=0.8) +
scale_x_continuous(name="Returns",limits=c(-plot_lim,plot_lim)) +
scale_y_continuous(name="Density") +
stat_function(fun = dt2,
args = list(m, s, tdf),
lwd=1,col = 'red')
if (showplot) g
return(g)
}
plot_t(logret)
answer6 = "Graph A"          ### replace NA with R code generating the answer
cat("Answer Q6:", answer6,'\n')
### question 7 start ###
fit_n <- fitdistr(logret, "normal")
fit_t <- fitdistr(logret, "t")
AIC_n <- 2*length(fit_n$estimate) - 2*fit_n$loglik
AIC_t <- 2*length(fit_t$estimate) - 2*fit_t$loglik
cat("AIC of normal = ",AIC_n,'\n')
cat("AIC of t = ",AIC_t,'\n')
AIC_t <= AIC_n
answer7 = "t-distribution"         ### replace NA with R code generating the answer
cat("Answer Q7:", answer7,'\n')
### question 8 start ###
initial <- 2000000
data.table(year = seq(0,5))
data.table(year = seq(0,5), cf = c(0,-annual_exp))
### question 8 start ###
initial <- 2000000
annual_exp <- 100000
data.table(year = seq(0,5), cf = c(0,-annual_exp))
data.table(year = seq(0,5), cf = c(0,rep(-annual_exp,5)))
cf <- c(0,rep(-annual_exp,5))
cf
data.table(year = seq(0,5), asset = initial)
data.table(year = seq(0,5), asset = initial)
cf <- c(0,rep(-annual_exp,5))
cf
cumsum(cf)
cf <- cumsum(cf)
data.table(year = seq(0,5), asset = initial+cf)
# strategy 1
data.table(year = seq(0,5), cf = c(0, rep(-100000, 5)))
# strategy 1
data.table(year = seq(0,5), cf = c(0, rep(-100000, 5)))
# strategy 1
data.table(year = seq(0,5), cash = c(0, rep(-100000, 5)))
View(lcap_data)
rtms <- function(n,df,m,s) {
return( ( rt(n,df) * s + m ) )
}
fitdistr(logret, densfun = "t")
fit_t$estimate
tdf <- fit_t$estimate[3]
tdf
tdf <- fit_t$estimate[[3]]
tdf
fit_t$estimate
tdf <- fit_t$estimate[[3]]
m <- fit_t$estimate[[1]]
s <- fit_t$estimate[[2]]
nsim <- 100000
set.seed(437)
nper <- 5
sim <- rep(0, nsim)
for(i in 1:nper){
sim <- sim + rtms(nsim,tdf,m,s)
}
sim
rtms(nsim,tdf,m,s)
data.table(year = seq(0,5), cash = c(0, rep(-100000, 5)))
data.table(year = seq(0,5), cash = c(initial, rep(0,5))
data.table(year = seq(0,5), cash = c(initial, rep(0,5)))
answer8 = NA         ### replace NA with R code generating the answer
data.table(year = seq(0,5), cash = c(initial, rep(0,5)))
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)),
stock = c(0, 1900000, 1800000, 1700000, 1600000)
)
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)),
stock = c(0, 1900000, 1800000, 1700000, 1600000, 1500000)
)
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)),
stock = c(0, 1900000, 1800000, 1700000, 1600000, 1500000)
)
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)),
stock = c(0, 1900000, rep(NA, 4))
sell.stock = c(0,0,rep(-100000,4))
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)),
stock = c(0, 1900000, rep(NA, 4)),
sell.stock = c(0,0,rep(-100000,4))
)
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)),
stock.face = c(0, 1900000, rep(NA, 4)),
stock.sell = c(0,0,rep(-100000,4))
)
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)),
spend = c(0, -100000, rep(0,4))
stock.face = c(0, 1900000, rep(NA, 4)),
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)),
spend = c(0, -100000, rep(0,4)),
stock.face = c(0, 1900000, rep(NA, 4)),
stock.sell = c(0,0,rep(-100000,4))
)
sim
tdf <- fit_t$estimate[[3]]
m <- fit_t$estimate[[1]]
s <- fit_t$estimate[[2]]
nsim <- 100000
set.seed(437)
sim <- rtms(nsim,tdf,m,s)
sim
value <- 1900000
value <- rep(2000000, nsim)
for(i in 1:5){
value <- value - 100000
value <- value * (1+sim)
}
value
alpha <- 0.95
VaR_ES <- CalcVaRES(sim,alpha)
?CalcVaRES
??CalcVaRES
library(metRology)
library(quantmod)
library(metRology)
library(quantmod)
VaR_ES <- CalcVaRES(sim,alpha)
CalcVaRES <- function(r,alpha) {
VaR <- quantile(r,1-alpha)
ES <- mean(r[r<VaR])
VaR_ES <- c(VaR,ES)
names(VaR_ES) <- c("VaR","ES")
return(VaR_ES)
}
alpha <- 0.95
VaR_ES <- CalcVaRES(sim,alpha)
round(VaR_ES,6)
VaR_ES <- CalcVaRES(value,alpha)
round(VaR_ES,6)
mean(value)
mean(value) > initial
VaR_ES[[1]] -initial
round(VaR_ES,6)
round(VaR_ES[[1]],6)
answer8 = round(VaR_ES[[1]],6)   ### replace NA with R code generating the answer
cat("Answer Q8:", answer8,'\n')
answer8 = round(VaR_ES[[1]])   ### replace NA with R code generating the answer
cat("Answer Q8:", answer8,'\n')
### question 9 start ###
data.table(year = seq(0,5),
cash = c(initial, 0,0,0,0,0))
### question 9 start ###
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)))
mean(value) - vinitial
mean(value) - initial
(mean(value) - initial)/initial
(mean(value))/initial
(mean(value)/initial)//5
(mean(value)/initial)
1.1^5
1.3^5
1.2^5
1.12^5
1.14^5
### question 9 start ###
data.table(year = seq(0,5),
cash = c(initial, rep(0,5)),
STRIP = c(0, -377204, rep(100000,4)),
stock = c(0, -1522796, rep(0,4))
)
value2 <- rep(0,nsim)
STRIP.cost <- 377204
initial - 100000 - STRIP.cost
value2 <- rep(initial - 100000 - STRIP.cost, nsim)
sim < - rep(0, nsim)
nper <- 5
for (i in 1:nper) {
sim <- sim+rtms(nsim,tdf,m,s)
}
sim
value2 * (1 + sim)
value2 <- value2 * (1 + sim)
value2 <- value2 * (1 + sim)
answer9 = value2   ### replace NA with R code generating the answer
value2 <- rep(initial - 100000 - STRIP.cost, nsim)
sim < - rep(0, nsim)
nper <- 5
for (i in 1:nper) {
sim <- sim+rtms(nsim,tdf,m,s)
}
value2 <- value2 * (1 + sim)
answer9 = value2
cat("Answer Q9:", answer9,'\n')
VaR_ES2 <- CalcVaRES(value2,alpha)
VaR_ES2
answer9 = round(VaR_ES2[[1]])   ### replace NA with R code generating the answer
mean(value)
mean(value2)
VaR_ES
VaR_ES2
cat("Answer Q9:", answer9,'\n')
check_for_answer <- function(question_num) {
# check environment if variable containing the answer is present in R environment
# in try catch block below
tryCatch({
if (exists(paste0("answer",question_num))){
answer <- get(paste0("answer",question_num))
}
else{
answer <- NA
}
})
return(answer)
}
answers = rep(NA, 9)
for (i in 2:9){
answers[i] = check_for_answer(i)
}
answers
answer4 = round(jarque.test(logret)$statistic,3)  ### replace NA with R code generating the answer
cat("Answer Q4:", answer4,'\n')
for (i in 2:9){
answers[i] = check_for_answer(i)
}
answers
